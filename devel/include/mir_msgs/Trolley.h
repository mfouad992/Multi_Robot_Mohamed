// Generated by gencpp from file mir_msgs/Trolley.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_TROLLEY_H
#define MIR_MSGS_MESSAGE_TROLLEY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mir_msgs
{
template <class ContainerAllocator>
struct Trolley_
{
  typedef Trolley_<ContainerAllocator> Type;

  Trolley_()
    : header()
    , hook_length(0.0)
    , hook_height(0.0)
    , angle(0.0)
    , braked(false)
    , id(0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , offset_locked_wheels(0.0)
    , trolley_attached(false)  {
    }
  Trolley_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hook_length(0.0)
    , hook_height(0.0)
    , angle(0.0)
    , braked(false)
    , id(0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , offset_locked_wheels(0.0)
    , trolley_attached(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _hook_length_type;
  _hook_length_type hook_length;

   typedef double _hook_height_type;
  _hook_height_type hook_height;

   typedef double _angle_type;
  _angle_type angle;

   typedef uint8_t _braked_type;
  _braked_type braked;

   typedef int32_t _id_type;
  _id_type id;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _height_type;
  _height_type height;

   typedef double _offset_locked_wheels_type;
  _offset_locked_wheels_type offset_locked_wheels;

   typedef uint8_t _trolley_attached_type;
  _trolley_attached_type trolley_attached;





  typedef boost::shared_ptr< ::mir_msgs::Trolley_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::Trolley_<ContainerAllocator> const> ConstPtr;

}; // struct Trolley_

typedef ::mir_msgs::Trolley_<std::allocator<void> > Trolley;

typedef boost::shared_ptr< ::mir_msgs::Trolley > TrolleyPtr;
typedef boost::shared_ptr< ::mir_msgs::Trolley const> TrolleyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::Trolley_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::Trolley_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::Trolley_<ContainerAllocator1> & lhs, const ::mir_msgs::Trolley_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hook_length == rhs.hook_length &&
    lhs.hook_height == rhs.hook_height &&
    lhs.angle == rhs.angle &&
    lhs.braked == rhs.braked &&
    lhs.id == rhs.id &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.height == rhs.height &&
    lhs.offset_locked_wheels == rhs.offset_locked_wheels &&
    lhs.trolley_attached == rhs.trolley_attached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::Trolley_<ContainerAllocator1> & lhs, const ::mir_msgs::Trolley_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::Trolley_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::Trolley_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::Trolley_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::Trolley_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::Trolley_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::Trolley_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::Trolley_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7d6628f1feb580d6f855e44d99a8402";
  }

  static const char* value(const ::mir_msgs::Trolley_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7d6628f1feb580dULL;
  static const uint64_t static_value2 = 0x6f855e44d99a8402ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::Trolley_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/Trolley";
  }

  static const char* value(const ::mir_msgs::Trolley_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::Trolley_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 hook_length\n"
"float64 hook_height\n"
"float64 angle\n"
"bool braked\n"
"\n"
"int32 id\n"
"float64 width\n"
"float64 length\n"
"float64 height\n"
"float64 offset_locked_wheels\n"
"\n"
"bool trolley_attached\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mir_msgs::Trolley_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::Trolley_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hook_length);
      stream.next(m.hook_height);
      stream.next(m.angle);
      stream.next(m.braked);
      stream.next(m.id);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.height);
      stream.next(m.offset_locked_wheels);
      stream.next(m.trolley_attached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trolley_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::Trolley_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::Trolley_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hook_length: ";
    Printer<double>::stream(s, indent + "  ", v.hook_length);
    s << indent << "hook_height: ";
    Printer<double>::stream(s, indent + "  ", v.hook_height);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "braked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.braked);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "offset_locked_wheels: ";
    Printer<double>::stream(s, indent + "  ", v.offset_locked_wheels);
    s << indent << "trolley_attached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trolley_attached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_TROLLEY_H
